#!/usr/bin/env python

import os
import sys
import subprocess
from git import Git

# Rider powerclass
class Rider:

  # Initialize a directory for Rider
  def rider_init(self):
    print "Initalizing Rider"

    if os.path.exists('.rider'):
      sys.exit('Rider has already been initialized!')

    # Setup rider lib
    if not os.path.exists('rider'):
      Git().clone("https://github.com/HackRider/Rider-lib.git")
      os.rename('Rider-lib', 'rider')

    # Setup the directories the user code will exist
    if not os.path.exists('controllers'):
      os.makedirs('controllers')
    if not os.path.exists('views'):
      os.makedirs('views')
    if not os.path.exists('build'):
      os.makedirs('build')
    if not os.path.exists('public/js'):
      os.makedirs('public/js')
    if not os.path.exists('public/css'):
      os.makedirs('public/css')

    # Create the entrypoint
    rider_path = os.path.realpath(__file__).rpartition('/')[0]
    template = file(rider_path + '/templates/EntryPointTemplate.txt', 'r')
    template = template.read()
    app = file('app.php', 'w')
    app.write(template)

    # Mark the directory as created by Rider
    if not os.path.exists('.rider'):
      file('.rider', 'w')

    print "Finished Initalizing Rider"

  # Make sure rider is initialized in the current directory
  def verify_rider_initalized(self):
    if not os.path.exists('.rider'):
      sys.exit("Not a valid Rider project. To initalize rider, "
               "run \"rider init\"")

  # Create a controller
  def rider_controller(self):
    # Get the user input
    controller_name = raw_input('Enter desired controller name: ')
    if os.path.exists('controllers/' + controller_name):
      sys.exit('Controller ' + controller + ' already exists')
    path = raw_input('Enter desired path: ')

    # Prepare the text from the template
    rider_path = os.path.realpath(__file__).rpartition('/')[0]
    template_file = file(rider_path + '/templates/ControllerTemplate.txt', 'r')
    controller_template = template_file.read()
    controller_template = controller_template.replace('{{CLASS}}', controller_name)
    controller_template = controller_template.replace('{{PATH}}', path)

    # Write the new controller
    controller = file('controllers/' + controller_name + '.php', 'w')
    controller.write(controller_template)

    # Re-generate the maps
    rider_crate_maps()

  def rider_route(self):
    # List the paths
    print 'Select the path to add a route to'

    # Get the user input
    print 'Select an HTTP method'
    print '(1) PUT'
    print '(2) POST'
    print '(3) GET'
    print '(4) DELETE'

    method_name = raw_input('Enter desired method name: ')

    # Prepare the template to write
    template_file = file(rider_path + '/templates/RouteTemplate.txt', 'r')
    route_template = template_file.read()
    route_template = route_template.replace('{{METHOD}}', method_type)
    route_template = route_template.replace('{{NAME}}', method_name)
    route_template = route_template.replace('{{RETURN}}', return_type)

    # Seek in file and write
    controller = file('controllers/' + controller_name + '.php', 'w')

  # Generate the URI and Autoload Maps
  def rider_create_maps(self):
    path = os.path.realpath(__file__).rpartition('/')[0]
    subprocess.call(['hhvm', path + '/URIMapGenerator.php'])
    subprocess.call(['hhvm', path + '/AutoloadMapGenerator.php'])

if (len(sys.argv) < 2):
  sys.exit('Invalid usage')

command = sys.argv[1].lower()
rider = Rider()

# Handle rider initialization
if command == 'init':
  rider.rider_init()
  sys.exit()

# Handle rider commands
rider.verify_rider_initalized() 
if command == 'controller':
  rider.rider_controller()
elif comment == 'route':
  rider.rider_route()
elif command == 'build':
  rider.rider_create_maps()
